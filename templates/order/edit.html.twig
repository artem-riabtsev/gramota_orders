{% extends 'base.html.twig' %}

{% block content %}
<h1>Заказ #{{ order.id }}</h1>

<form method="post" action="{{ path('app_order_edit', {'id': order.id}) }}" id="order-form">
    <input type="hidden" name="deleted_items" id="deleted-items" value="">

    <div class="card mb-4">
        <div class="card-body">
            <div class="row">
                <div class="col-md-6 mb-3">
                    {{ form_label(form.date) }}
                    {{ form_widget(form.date, {'attr': {'class': 'form-control'}}) }}
                </div>
            </div>
            <div>Заказчик: {{ order.customer.name }} ({{ order.customer.email }}, {{ order.customer.phone }})</div>
            <div>Сумма оплаты: {{ order.paymentAmount }}</div>
            <div>Сумма заказа: {{ order.amount }}</div>
        </div>
    </div>
    <table class="table table-hover table-bordered align-middle" id="cart-table">
        <thead>
            <tr>
                <th>Наименование</th>
                <th>Количество</th>
                <th>Цена</th>
                <th>Всего</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            {% for cartItem in order.cart %}
                <tr>
                    <td>
                        <select name="cart[{{ cartItem.id }}][product_id]" class="form-select product-name" required style="border: none !important;">
                            {% for price in prices %}
                                <option value="{{ price.id }}" 
                                    {% if cartItem.product and price.id == cartItem.product.id %}selected{% endif %}
                                    data-price="{{ price.price }}">
                                    {{ price.name }}
                                </option>
                            {% endfor %}
                        </select>
                    </td>
                    <td>
                        <input type="number" name="cart[{{ cartItem.id }}][quantity]" 
                               value="{{ cartItem.quantity }}" class="form-control quantity" min="1" required style="border: none !important;">
                    </td>
                    <td>
                        <input type="text" name="cart[{{ cartItem.id }}][price]" 
                               value="{{ cartItem.price }}" class="form-control price" required style="border: none !important;">
                    </td>
                    <td>
                        <input type="text" name="cart[{{ cartItem.id }}][total_amount]" 
                               value="{{ cartItem.totalAmount }}" class="form-control total-amount" required style="border: none !important;">
                    </td>
                    <td>
                        <div class='d-flex' style='gap: 8px;'>
                            <button type="button" class="btn btn-sm btn-outline-danger remove-row" 
                                    data-id="{{ cartItem.id }}">Удалить</button>
                        </div>
                    </td>
                </tr>
            {% endfor %}
        </tbody>
    </table>

    <button type="button" class="btn btn-outline-secondary mb-3" id="add-row">➕ Добавить строку</button>
    <div class="mt-3">
        <button type="submit" name="save" class="btn btn-primary me-2">Сохранить всё</button>
        <a href="{{ path('app_order_index') }}" class="btn btn-secondary">Назад</a>
    </div>

    {{ form_end(form) }}
</form>

<script type="text/template" id="cart-row-template">
<tr>
    <td>
        <select name="cart[new_{{ '{{ index }}' }}][product_id]" class="form-select product-name" required style="border: none !important;">
            {% for price in prices %}
                <option value="{{ price.id }}" data-price="{{ price.price }}">{{ price.name }}</option>
            {% endfor %}
        </select>
    </td>
    <td><input type="number" name="cart[new_{{ '{{ index }}' }}][quantity]" value="1" min="1" class="form-control quantity" required style="border: none !important;"></td>
    <td><input type="text" name="cart[new_{{ '{{ index }}' }}][price]" class="form-control price" required style="border: none !important;"></td>
    <td><input type="text" name="cart[new_{{ '{{ index }}' }}][total_amount]" class="form-control total-amount" required style="border: none !important;"></td>
    <td>
        <div class='d-flex' style='gap: 8px;'>
            <button type="button" class="btn btn-sm btn-outline-danger remove-row">Удалить</button>
        </div>
    </td>
</tr>
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {

    const saveButton = document.querySelector('button[name="save"]');
    const form = document.getElementById('order-form');

    saveButton.disabled = true;
    saveButton.classList.add('disabled');

    function checkFormChanges() {
        let changed = false;
        
        if (document.getElementById('deleted-items').value !== '') {
            changed = true;
        }
        
        document.querySelectorAll('#cart-table input, #cart-table select').forEach(el => {
            if (el.value !== el.defaultValue) {
                changed = true;
            }
        });
        
        saveButton.disabled = !changed;
        saveButton.classList.toggle('disabled', !changed);
    }

    document.querySelectorAll('#cart-table input, #cart-table select').forEach(el => {
        el.defaultValue = el.value;
        el.addEventListener('input', checkFormChanges);
        el.addEventListener('change', checkFormChanges);
    });

    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-row')) {
            
            const row = e.target.closest('tr');
            const inputName = row.querySelector('[name*="[product_id]"]').name;
            const itemId = inputName.match(/cart\[([^\]]+)\]/)[1];
            
            if (!itemId.startsWith('new_')) {
                const deletedInput = document.getElementById('deleted-items');
                const currentDeleted = deletedInput.value ? deletedInput.value.split(',') : [];
                currentDeleted.push(itemId);
                deletedInput.value = currentDeleted.join(',');
            }
            
            row.remove();
            checkFormChanges();
        }
    });

    document.getElementById('add-row').addEventListener('click', function() {
        const template = document.getElementById('cart-row-template').innerHTML;
        const html = template.replace(/{{ '{{ index }}' }}/g, Date.now());
        const row = document.createElement('tr');
        row.innerHTML = html;
        document.querySelector('#cart-table tbody').appendChild(row);
        bindCartRowEvents(row);
        checkFormChanges();
    });

    function bindCartRowEvents(row) {
        const select = row.querySelector('.product-name');
        const priceInput = row.querySelector('.price');
        const qtyInput = row.querySelector('.quantity');
        const totalInput = row.querySelector('.total-amount');

        function updatePrice() {
            const selectedOption = select.options[select.selectedIndex];
            priceInput.value = parseFloat(selectedOption.dataset.price || 0).toFixed(2);
            updateTotal();
        }

        function updateTotal() {
            const price = parseFloat(priceInput.value || 0);
            const qty = parseInt(qtyInput.value || 1);
            totalInput.value = (price * qty).toFixed(2);
        }

        select.addEventListener('change', updatePrice);
        qtyInput.addEventListener('input', updateTotal);
        priceInput.addEventListener('input', updateTotal);

        if (!priceInput.value) {
            updatePrice();
        }
        toggleRowEditing(row, false);
    }
    document.querySelectorAll('#cart-table tbody tr').forEach(row => bindCartRowEvents(row));
});
</script>
{% endblock %}
