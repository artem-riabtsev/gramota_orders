{% extends 'base.html.twig' %}

{% block content %}
<h1>Заказ #{{ order.id }}</h1>

<form method="post" action="{{ path('app_order_edit', {'id': order.id}) }}" id="order-form">
    <input type="hidden" name="deleted_items[]" id="deleted-items" value="">

    <div class="card mb-4">
        <div class="card-body">
            <div class="row">
                <div class="col-md-6 mb-3">
                    {{ form_label(form.date) }}
                    <div class="d-flex" style="gap: 8px;">
                        {{ form_widget(form.date, {'attr': {'class': 'form-control border'}}) }}
                        <button type="submit" name="save" class="btn btn-primary me-2">Сохранить</button>
                    </div>
                </div>
            </div>
            <div class="mb-4">Заказчик: {{ order.customer.name }} ({{ order.customer.email }}, {{ order.customer.phone }})</div>
            <div class="d-flex" style="gap: 50px;">
                <div>Сумма заказа: <strong>{{ order.amount }}</strong></div>
                <div>Сумма оплаты: {{ order.paymentAmount }}</div>
            </div>
        </div>
    </div>

    <table class="table table-hover table-bordered align-middle" id="cart-table">
    <thead>
        <tr>
            <th>Наименование</th>
            <th>Количество</th>
            <th>Цена</th>
            <th>Всего</th>
            <th>Действия</th>
        </tr>
    </thead>
    <tbody>
        {% for cartItem in order.cart %}
            <tr data-id="{{ cartItem.id }}">
                <td data-product-id="{{ cartItem.product.id }}" >{{ cartItem.product.name }}</td>
                <td>{{ cartItem.quantity }}</td>
                <td>{{ cartItem.price }}</td>
                <td>{{ cartItem.totalAmount }}</td>
                <td>
                    <div class='d-flex' style='gap: 8px;'>
                        <button type="button" class="btn btn-sm btn-outline-warning edit-item" 
                                data-id="{{ cartItem.id }}">Редактировать</button>
                        <button type="button" class="btn btn-sm btn-outline-danger remove-item" 
                                data-id="{{ cartItem.id }}">Удалить</button>
                    </div>
                </td>
            </tr>
        {% endfor %}
    </tbody>
</table>

<button type="button" class="btn btn-outline-secondary mb-3" id="add-item" data-bs-toggle="modal" data-bs-target="#itemModal">
    ➕ Добавить позицию
</button>

<div class="mt-3">
    <a href="{{ path('app_order_index') }}" class="btn btn-secondary">Назад</a>
</div>

    {{ form_end(form) }}
</form>

<!-- Модальное окно для редактирования/добавления -->
<div class="modal fade" id="itemModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">Новая позиция</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="itemForm" method="post" action="{{ path('app_order_edit', {'id': order.id}) }}">
                <input type="hidden" name="_token" value="{{ csrf_token('edit' ~ order.id) }}">
                <input type="hidden" name="item_id" id="itemId">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="product" class="form-label">Товар</label>
                        <select id="product" name="cart[__ID__][product_id]" class="form-select" required>
                            <option value="" disabled selected>Выберите позицию</option>
                            {% for price in prices %}
                                <option value="{{ price.id }}" data-price="{{ price.price }}">{{ price.name }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="quantity" class="form-label">Количество</label>
                        <input type="number" class="form-control" id="quantity" name="cart[__ID__][quantity]" min="1" value="1" required>
                    </div>
                    <div class="mb-3">
                        <label for="price" class="form-label">Цена</label>
                        <input type="text" class="form-control" id="price" name="cart[__ID__][price]" required>
                    </div>
                    <div class="mb-3">
                        <label for="total" class="form-label">Всего</label>
                        <input type="text" class="form-control" id="total" name="cart[__ID__][total_amount]" required>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                    <button type="submit" class="btn btn-primary">Сохранить</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Модалка подтверждения удаления -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Подтвердите удаление</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
      </div>
      <div class="modal-body">
        Вы уверены, что хотите удалить эту позицию?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
        <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Удалить</button>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const modal = new bootstrap.Modal('#itemModal');
    const itemForm = document.getElementById('itemForm');
    const modalTitle = document.getElementById('modalTitle');
    const itemIdInput = document.getElementById('itemId');
    const productSelect = document.getElementById('product');
    const quantityInput = document.getElementById('quantity');
    const priceInput = document.getElementById('price');
    const totalInput = document.getElementById('total');
    const dateInput = document.getElementById('order_form_date');
    const deleteModal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));
    let itemIdToDelete = null;

    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-item')) {
            e.preventDefault();

            itemIdToDelete = e.target.dataset.id;
            deleteModal.show();
        }
    });

    document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
        if (!itemIdToDelete) return;

        // Создаем форму для отправки удаления
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '{{ path('app_order_edit', {'id': order.id}) }}';

        // CSRF
        const csrfInput = document.createElement('input');
        csrfInput.type = 'hidden';
        csrfInput.name = '_token';
        csrfInput.value = '{{ csrf_token('edit' ~ order.id) }}';
        form.appendChild(csrfInput);

        // ID удаляемого элемента
        const deleteInput = document.createElement('input');
        deleteInput.type = 'hidden';
        deleteInput.name = 'deleted_items[]';
        deleteInput.value = itemIdToDelete;
        form.appendChild(deleteInput);

        document.body.appendChild(form);
        form.submit();
    });

    if (dateInput) {
        const originalValue = dateInput.value;

        dateInput.addEventListener('input', function () {
            if (this.value !== originalValue) {
                this.classList.remove('border'); // убери серую рамку
                this.classList.add('border-warning'); // добавь жёлтую
            } else {
                this.classList.remove('border-warning');
                this.classList.add('border'); // верни серую рамку
            }
        });
    }

    // Обновление общей суммы
    function updateTotal() {
        const price = parseFloat(priceInput.value) || 0;
        const quantity = parseInt(quantityInput.value) || 1;
        totalInput.value = (price * quantity).toFixed(2);
    }

    // Обратный пересчёт цены по "Всего"
    function updatePriceFromTotal() {
        const total = parseFloat(totalInput.value) || 0;
        const quantity = parseInt(quantityInput.value) || 1;
        if (quantity > 0) {
            priceInput.value = (total / quantity).toFixed(2);
        }
    }

    // Инициализация модалки для добавления
    document.getElementById('add-item').addEventListener('click', function() {
        modalTitle.textContent = 'Добавить позицию';
        itemIdInput.value = '';

        // Очищаем выбор продукта
        productSelect.selectedIndex = 0;
        productSelect.value = '';

        // Очищаем остальные поля
        quantityInput.value = '';
        priceInput.value = '';
        totalInput.value = '';
    });

    // Редактирование позиции
    document.querySelectorAll('.edit-item').forEach(btn => {
        btn.addEventListener('click', function() {
            const itemId = this.dataset.id;
            const row = document.querySelector(`tr[data-id="${itemId}"]`);
            
            modalTitle.textContent = 'Редактирование позиции';
            itemIdInput.value = itemId;
            productSelect.value = row.querySelector('td:first-child').dataset.productId;
            quantityInput.value = row.querySelector('td:nth-child(2)').textContent;
            priceInput.value = row.querySelector('td:nth-child(3)').textContent;
            updateTotal();
            
            modal.show();
        });
    });

    // Обработчики изменений
    quantityInput.addEventListener('input', () => {
        updateTotal();
    });

    priceInput.addEventListener('input', () => {
        updateTotal();
    });

    totalInput.addEventListener('input', () => {
        updatePriceFromTotal();
    });

    productSelect.addEventListener('change', function() {
        const selectedOption = this.options[this.selectedIndex];
        
        if (!selectedOption.value) {
            // Ничего не выбрано
            quantityInput.value = '';
            priceInput.value = '';
            totalInput.value = '';
            return;
        }

        const price = parseFloat(selectedOption.dataset.price);

        // Устанавливаем количество = 1 по умолчанию
        quantityInput.value = '1';
        priceInput.value = price.toFixed(2);
        totalInput.value = price.toFixed(2);
    });

    // Обработка отправки формы
    itemForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = new FormData(this);
        
        // Подмена __ID__ на реальный ID
        const itemId = formData.get('item_id') || 'new_' + Date.now();
        const newFormData = new FormData();
        
        newFormData.append('_token', formData.get('_token'));
        newFormData.append(`cart[${itemId}][product_id]`, formData.get('cart[__ID__][product_id]'));
        newFormData.append(`cart[${itemId}][quantity]`, formData.get('cart[__ID__][quantity]'));
        newFormData.append(`cart[${itemId}][price]`, formData.get('cart[__ID__][price]'));
        newFormData.append(`cart[${itemId}][total_amount]`, formData.get('cart[__ID__][total_amount]'));
        
        fetch(this.action, {
            method: 'POST',
            body: newFormData
        })
        .then(response => {
            if (response.redirected) {
                window.location.href = response.url;
            }
        })
        .catch(error => console.error('Error:', error));
    });
});
</script>
{% endblock %}
